"use strict";(self.webpackChunkevent_storm_documentation=self.webpackChunkevent_storm_documentation||[]).push([[559],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=p(n),d=o,v=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(v,a(a({ref:e},l),{},{components:n})):r.createElement(v,a({ref:e},l))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6585:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={id:"motivation",title:"Motivation",tags:["motivation"],sidebar_position:2},a=void 0,s={unversionedId:"motivation",id:"motivation",title:"Motivation",description:"Motivation",source:"@site/docs/motivation.md",sourceDirName:".",slug:"/motivation",permalink:"/docs/motivation",draft:!1,editUrl:"https://github.com/event-storm/event-storm-documentation/tree/main/motivation.md",tags:[{label:"motivation",permalink:"/docs/tags/motivation"}],version:"current",sidebarPosition:2,frontMatter:{id:"motivation",title:"Motivation",tags:["motivation"],sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/introduction"},next:{title:"Main concepts",permalink:"/docs/category/main-concepts"}},c={},p=[{value:"Motivation \ud83d\udcd8",id:"motivation-",level:2}],l={toc:p};function m(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"motivation-"},"Motivation \ud83d\udcd8"),(0,o.kt)("p",null,"Mainly in modern applications, developers are facing problems to store data. Currently the community is using ",(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/"},"Redux"),", ",(0,o.kt)("a",{parentName:"p",href:"https://mobx.js.org/README.html"},"MobX"),", ",(0,o.kt)("a",{parentName:"p",href:"https://overmindjs.org/"},"overmind"),", etc for this purpose. ",(0,o.kt)("strong",{parentName:"p"},"As web-based applications are natively event-based, it'll be nice\nto have an event-based store for the data"),". This library is an implementation of event-based data storage inspired by ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Event_store"},"Event store")," \ud83d\udca1.\nIt is called to create an in-memory event sourcing storage."))}m.isMDXComponent=!0}}]);