"use strict";(self.webpackChunkevent_storm_documentation=self.webpackChunkevent_storm_documentation||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/event-storm-documentation/docs/introduction","docId":"introduction"},{"type":"link","label":"Motivation","href":"/event-storm-documentation/docs/motivation","docId":"motivation"},{"type":"category","label":"Main concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"The terminology","href":"/event-storm-documentation/docs/concepts/glossary","docId":"concepts/glossary"},{"type":"link","label":"The bigger picture","href":"/event-storm-documentation/docs/concepts/overview","docId":"concepts/overview"},{"type":"link","label":"Performance impact","href":"/event-storm-documentation/docs/concepts/performance","docId":"concepts/performance"},{"type":"link","label":"Optimizating the run time","href":"/event-storm-documentation/docs/concepts/optimizations","docId":"concepts/optimizations"},{"type":"link","label":"Developer experience","href":"/event-storm-documentation/docs/concepts/dx","docId":"concepts/dx"},{"type":"link","label":"What is a subscription?","href":"/event-storm-documentation/docs/concepts/subscription","docId":"concepts/subscription"},{"type":"link","label":"How the API is designed?","href":"/event-storm-documentation/docs/concepts/api","docId":"concepts/api"}],"href":"/event-storm-documentation/docs/category/main-concepts"},{"type":"link","label":"Recommendations","href":"/event-storm-documentation/docs/recommendations","docId":"recommendations"},{"type":"category","label":"API reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"API Overview","href":"/event-storm-documentation/docs/api-reference/overview","docId":"api-reference/overview"},{"type":"link","label":"Storm","href":"/event-storm-documentation/docs/api-reference/storm","docId":"api-reference/storm"},{"type":"link","label":"Model","href":"/event-storm-documentation/docs/api-reference/model","docId":"api-reference/model"},{"type":"link","label":"Model with state derivation","href":"/event-storm-documentation/docs/api-reference/virtualmodel","docId":"api-reference/virtualmodel"},{"type":"link","label":"Make the store persistant","href":"/event-storm-documentation/docs/api-reference/persistency","docId":"api-reference/persistency"}],"href":"/event-storm-documentation/docs/category/api-reference"},{"type":"category","label":"Official bindings","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Supported bindings","href":"/event-storm-documentation/docs/bindings/overview","docId":"bindings/overview"},{"type":"category","label":"React Event Storm","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"React Event Storm","href":"/event-storm-documentation/docs/bindings/react/bindings-overview","docId":"bindings/react/bindings-overview"},{"type":"category","label":"API reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"useStorm","href":"/event-storm-documentation/docs/bindings/react/api-reference/bindings-api-usestorm","docId":"bindings/react/api-reference/bindings-api-usestorm"},{"type":"link","label":"usePublish","href":"/event-storm-documentation/docs/bindings/react/api-reference/bindings-api-usepublish","docId":"bindings/react/api-reference/bindings-api-usepublish"},{"type":"link","label":"useModels","href":"/event-storm-documentation/docs/bindings/react/api-reference/bindings-api-usemodels","docId":"bindings/react/api-reference/bindings-api-usemodels"}],"href":"/event-storm-documentation/docs/category/api-reference-1"}],"href":"/event-storm-documentation/docs/category/react-event-storm"}],"href":"/event-storm-documentation/docs/category/official-bindings"}]},"docs":{"api-reference/model":{"id":"api-reference/model","title":"Model","description":"Creating a single information unit. Use this method to have syncronized updates for all the subscribers.","sidebar":"tutorialSidebar"},"api-reference/overview":{"id":"api-reference/overview","title":"API Overview","description":"The API reference is bringing the examples in typescript","sidebar":"tutorialSidebar"},"api-reference/persistency":{"id":"api-reference/persistency","title":"Make the store persistant","description":"You can easly make your store any segment to be persisted by persisted function.","sidebar":"tutorialSidebar"},"api-reference/storm":{"id":"api-reference/storm","title":"Storm","description":"In general, in event sourcing technology there is no place to have a centralized single information segment. In contrast to having this, the composition and deriving the real information is suggested. The Event Storm library suggests for this purpose usage of virtual models. On the other hand, it\'s straightforward, that at scale this will result in a lot of boilerplate code. That\u2019s why the library is suggesting a store concept which has the full power of decentralized data store.","sidebar":"tutorialSidebar"},"api-reference/virtualmodel":{"id":"api-reference/virtualmodel","title":"Model with state derivation","description":"It is possible to derive the state of the model and compose abstraction on that derivation. The abstraction is called virtual model.","sidebar":"tutorialSidebar"},"bindings/overview":{"id":"bindings/overview","title":"Supported bindings","description":"Event Storm needs a binding in order to work with a UI solution. In other words the renderer mechanism needs to be triggered on storm update.","sidebar":"tutorialSidebar"},"bindings/react/api-reference/bindings-api-usemodels":{"id":"bindings/react/api-reference/bindings-api-usemodels","title":"useModels","description":"The Event Storm models also can be used with React components. useModels can receive a models array, subscribe to them and return their last states( in the same provided order).","sidebar":"tutorialSidebar"},"bindings/react/api-reference/bindings-api-usepublish":{"id":"bindings/react/api-reference/bindings-api-usepublish","title":"usePublish","description":"The publsh hook, is simply reexporting of the storm.publish method.","sidebar":"tutorialSidebar"},"bindings/react/api-reference/bindings-api-usestorm":{"id":"bindings/react/api-reference/bindings-api-usestorm","title":"useStorm","description":"The storm inside react components can be used with the help of useStorm hook. Example:","sidebar":"tutorialSidebar"},"bindings/react/bindings-overview":{"id":"bindings/react/bindings-overview","title":"React Event Storm","description":"The problem","sidebar":"tutorialSidebar"},"concepts/api":{"id":"concepts/api","title":"How the API is designed?","description":"The Event Storm library","sidebar":"tutorialSidebar"},"concepts/dx":{"id":"concepts/dx","title":"Developer experience","description":"","sidebar":"tutorialSidebar"},"concepts/glossary":{"id":"concepts/glossary","title":"The terminology","description":"The Event Storm is based on event sourcing technology. To organize such a system you need to define what is the information that needs to be considered as a source.","sidebar":"tutorialSidebar"},"concepts/optimizations":{"id":"concepts/optimizations","title":"Optimizating the run time","description":"","sidebar":"tutorialSidebar"},"concepts/overview":{"id":"concepts/overview","title":"The bigger picture","description":"The Event Storm library is focused on providing a high performance in memory data store. Furthermore, focusing on performance, the Event Storm, also is providing a simple and already familiar API, to minimize the intergation cost.","sidebar":"tutorialSidebar"},"concepts/performance":{"id":"concepts/performance","title":"Performance impact","description":"Performance (TODO:: state management ownership, Context.Provider)","sidebar":"tutorialSidebar"},"concepts/subscription":{"id":"concepts/subscription","title":"What is a subscription?","description":"Generally saying subscription is receiving some information(maybe something) over some agreement. According to the definition the act of subscription is based on particular subscription subject. Which basically means, that the owner of the subscription must receive an information, if and only if, the particular subject has been changed. Furthermore, the owner of the subject must not be even \\"disturbed\\", for any other reason.","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction","description":"The Event Storm is a tiny store implementation with pure javascript.","sidebar":"tutorialSidebar"},"motivation":{"id":"motivation","title":"Motivation","description":"In the modern world data storage is an inseparable component of most applications. There are various problems crossing the same issue of having efficient data storage(caching, application state management, databases, etc.).","sidebar":"tutorialSidebar"},"recommendations":{"id":"recommendations","title":"Recommendations","description":"","sidebar":"tutorialSidebar"}}}')}}]);